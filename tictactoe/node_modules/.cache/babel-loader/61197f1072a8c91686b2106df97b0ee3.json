{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HI10\\\\Documents\\\\VincentV\\\\BNPTTT\\\\New folder\\\\tic-tac-toe\\\\src\\\\components\\\\tictactoe.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport Grid from \"./grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TicTacToe = props => {\n  _s();\n\n  this.gamePlay = this.gamePlay.bind(this);\n  const [gridArray, setGridArray] = useState(props.board);\n  const [isFirstPlayerTurn, setFirstPlayerTurn] = useState(true);\n  useEffect(() => {\n    if (props.winner != null) {\n      let message;\n      message = \"The winner is that player that played with \" + props.winner;\n      window.alert(message);\n    }\n  }); // const gamePlay = (playertype, coX, coY, gameId) =>{\n  //     const that = this;\n  //         let playerhold = JSON.stringify({\n  //             \"type\": playertype,\n  //             \"coordinateX\" : coX,\n  //             \"coordinateY\" : coY,\n  //             \"gameId\" : gameId\n  //         });\n  //     const requestOptions = {\n  //       method: 'POST',\n  //       headers: { 'Content-Type': 'application/json' },\n  //       body: playerhold}\n  //       await fetch(\"http://localhost:8080/game/gameplay\", \n  //       requestOptions\n  //         )\n  //         .then((response) => {\n  //           response.json()\n  //           .then((createdGame) => {\n  //             that.setState({\n  //               game : createdGame\n  //             })\n  //           }) \n  //         })\n  //       .catch(err => {console.log(err);\n  //       });\n  //   }\n\n  const onTilePress = index => {\n    // gridArray[index] = isFirstPlayerTurn ? 0 : 1;\n    // this.gamePlay(isFirstPlayerTurn ? 0 : 1, index)\n    // setFirstPlayerTurn(!isFirstPlayerTurn);\n    console.log(index);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    gridArray: gridArray.current,\n    onTilePress: onTilePress\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TicTacToe, \"z6PiEl/UvYk8xrzL1k76iwVLrco=\");\n\n_c = TicTacToe;\nexport default TicTacToe;\n\nvar _c;\n\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"sources":["C:/Users/HI10/Documents/VincentV/BNPTTT/New folder/tic-tac-toe/src/components/tictactoe.js"],"names":["useEffect","useRef","useState","Grid","TicTacToe","props","gamePlay","bind","gridArray","setGridArray","board","isFirstPlayerTurn","setFirstPlayerTurn","winner","message","window","alert","onTilePress","index","console","log","current"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AACrB,OAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACJ,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAACG,KAAK,CAACK,KAAP,CAA1C;AACA,QAAM,CAACC,iBAAD,EAAoBC,kBAApB,IAA0CV,QAAQ,CAAC,IAAD,CAAxD;AAGAF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGK,KAAK,CAACQ,MAAN,IAAe,IAAlB,EAAwB;AACpB,UAAIC,OAAJ;AACAA,MAAAA,OAAO,GAAG,gDAAgDT,KAAK,CAACQ,MAAhE;AACAE,MAAAA,MAAM,CAACC,KAAP,CAAaF,OAAb;AACH;AACJ,GANQ,CAAT,CANyB,CAczB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMG,WAAW,GAAIC,KAAD,IAAW;AAC3B;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GALD;;AAMA,sBACI,QAAC,IAAD;AACA,IAAA,SAAS,EAAEV,SAAS,CAACa,OADrB;AAEA,IAAA,WAAW,EAAEJ;AAFb;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CApDD;;GAAMb,S;;KAAAA,S;AAsDN,eAAeA,SAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport Grid from \"./grid\";\r\n\r\nconst TicTacToe = (props) => {\r\n        this.gamePlay = this.gamePlay.bind(this);\r\n    const [gridArray, setGridArray] = useState(props.board);\r\n    const [isFirstPlayerTurn, setFirstPlayerTurn] = useState(true);\r\n    \r\n\r\n    useEffect(() => {\r\n        if(props.winner!= null) {\r\n            let message;\r\n            message = \"The winner is that player that played with \" + props.winner;\r\n            window.alert(message);\r\n        }\r\n    });\r\n\r\n    // const gamePlay = (playertype, coX, coY, gameId) =>{\r\n    //     const that = this;\r\n    //         let playerhold = JSON.stringify({\r\n    //             \"type\": playertype,\r\n    //             \"coordinateX\" : coX,\r\n    //             \"coordinateY\" : coY,\r\n    //             \"gameId\" : gameId\r\n    //         });\r\n    //     const requestOptions = {\r\n    //       method: 'POST',\r\n    //       headers: { 'Content-Type': 'application/json' },\r\n    //       body: playerhold}\r\n    //       await fetch(\"http://localhost:8080/game/gameplay\", \r\n    //       requestOptions\r\n    //         )\r\n    //         .then((response) => {\r\n    //           response.json()\r\n    //           .then((createdGame) => {\r\n    //             that.setState({\r\n    //               game : createdGame\r\n    //             })\r\n    //           }) \r\n    //         })\r\n    //       .catch(err => {console.log(err);\r\n    //       });\r\n    //   }\r\n    const onTilePress = (index) => {\r\n        // gridArray[index] = isFirstPlayerTurn ? 0 : 1;\r\n        // this.gamePlay(isFirstPlayerTurn ? 0 : 1, index)\r\n        // setFirstPlayerTurn(!isFirstPlayerTurn);\r\n        console.log(index)\r\n    }\r\n    return(\r\n        <Grid\r\n        gridArray={gridArray.current}\r\n        onTilePress={onTilePress}\r\n        />\r\n    );\r\n}\r\n\r\nexport default TicTacToe;"]},"metadata":{},"sourceType":"module"}