{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HI10\\\\Documents\\\\VincentV\\\\BNPTTT\\\\New folder\\\\tic-tac-toe\\\\src\\\\components\\\\tictactoe.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport Grid from \"./grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TicTacToe = props => {\n  _s();\n\n  const gridArray = props.board;\n  const [isFirstPlayerTurn, setFirstPlayerTurn] = useState(true);\n  useEffect(() => {\n    let valueToCheck = !isFirstPlayerTurn ? 1 : 2; //let hasMovesLeft = hasMovesLeft(gridArray.current);\n\n    if (props.winner != null) {\n      let message;\n      message = \"Game Over, game ended in a draw\\nPress OK to restart\";\n      window.alert(message);\n      setFirstPlayerTurn(true);\n    }\n  });\n\n  const onTilePress = index => {\n    gridArray.current[index] = isFirstPlayerTurn ? 1 : 2;\n    setFirstPlayerTurn(!isFirstPlayerTurn);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    gridArray: gridArray.current,\n    onTilePress: onTilePress\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TicTacToe, \"Tx00M8AJoPLt+yc3ZNPG7IavuYE=\");\n\n_c = TicTacToe;\n\nconst checkLine = (line, valueToCheck) => {\n  return line.length === line.filter(value => value === valueToCheck).length;\n};\n\nconst checkLines = (lines, valueToCheck) => {\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n\n    if (checkLine(line, valueToCheck)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst hasMovesLeft = gridArray => {\n  return gridArray.filter(value => value === 0).length !== 0;\n};\n\nexport default TicTacToe;\nexport { checkLine, checkLines, hasMovesLeft };\n\nvar _c;\n\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"sources":["C:/Users/HI10/Documents/VincentV/BNPTTT/New folder/tic-tac-toe/src/components/tictactoe.js"],"names":["useEffect","useRef","useState","Grid","TicTacToe","props","gridArray","board","isFirstPlayerTurn","setFirstPlayerTurn","valueToCheck","winner","message","window","alert","onTilePress","index","current","checkLine","line","length","filter","value","checkLines","lines","i","hasMovesLeft"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAEzB,QAAMC,SAAS,GAAGD,KAAK,CAACE,KAAxB;AAEA,QAAM,CAACC,iBAAD,EAAoBC,kBAApB,IAA0CP,QAAQ,CAAC,IAAD,CAAxD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,YAAY,GAAG,CAACF,iBAAD,GAAqB,CAArB,GAAyB,CAA5C,CADY,CAEZ;;AACA,QAAGH,KAAK,CAACM,MAAN,IAAe,IAAlB,EAAwB;AACpB,UAAIC,OAAJ;AAEIA,MAAAA,OAAO,GAAG,sDAAV;AACJC,MAAAA,MAAM,CAACC,KAAP,CAAaF,OAAb;AACAH,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;AACJ,GAVQ,CAAT;;AAYA,QAAMM,WAAW,GAAIC,KAAD,IAAW;AAC3BV,IAAAA,SAAS,CAACW,OAAV,CAAkBD,KAAlB,IAA2BR,iBAAiB,GAAG,CAAH,GAAO,CAAnD;AACAC,IAAAA,kBAAkB,CAAC,CAACD,iBAAF,CAAlB;AACH,GAHD;;AAIA,sBACI,QAAC,IAAD;AACA,IAAA,SAAS,EAAEF,SAAS,CAACW,OADrB;AAEA,IAAA,WAAW,EAAEF;AAFb;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CA5BD;;GAAMX,S;;KAAAA,S;;AA8BN,MAAMc,SAAS,GAAG,CAACC,IAAD,EAAOT,YAAP,KAAwB;AACtC,SAAOS,IAAI,CAACC,MAAL,KAAgBD,IAAI,CAACE,MAAL,CAAaC,KAAD,IAAWA,KAAK,KAAKZ,YAAjC,EAA+CU,MAAtE;AACH,CAFD;;AAIA,MAAMG,UAAU,GAAG,CAACC,KAAD,EAAQd,YAAR,KAAyB;AACxC,OAAI,IAAIe,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,KAAK,CAACJ,MAAzB,EAAiCK,CAAC,EAAlC,EAAsC;AAClC,QAAIN,IAAI,GAAGK,KAAK,CAACC,CAAD,CAAhB;;AACA,QAAGP,SAAS,CAACC,IAAD,EAAOT,YAAP,CAAZ,EAAkC;AAC9B,aAAO,IAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH,CARD;;AAUA,MAAMgB,YAAY,GAAIpB,SAAD,IAAe;AAChC,SAAOA,SAAS,CAACe,MAAV,CAAkBC,KAAD,IAAWA,KAAK,KAAK,CAAtC,EAAyCF,MAAzC,KAAoD,CAA3D;AACH,CAFD;;AAGA,eAAehB,SAAf;AACA,SAAQc,SAAR,EAAmBK,UAAnB,EAA+BG,YAA/B","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport Grid from \"./grid\";\r\n\r\nconst TicTacToe = (props) => {\r\n\r\n    const gridArray = props.board;\r\n\r\n    const [isFirstPlayerTurn, setFirstPlayerTurn] = useState(true);\r\n\r\n    useEffect(() => {\r\n        let valueToCheck = !isFirstPlayerTurn ? 1 : 2;\r\n        //let hasMovesLeft = hasMovesLeft(gridArray.current);\r\n        if(props.winner!= null) {\r\n            let message;\r\n\r\n                message = \"Game Over, game ended in a draw\\nPress OK to restart\"\r\n            window.alert(message);\r\n            setFirstPlayerTurn(true);\r\n        }\r\n    });\r\n\r\n    const onTilePress = (index) => {\r\n        gridArray.current[index] = isFirstPlayerTurn ? 1 : 2;\r\n        setFirstPlayerTurn(!isFirstPlayerTurn);\r\n    }\r\n    return(\r\n        <Grid\r\n        gridArray={gridArray.current}\r\n        onTilePress={onTilePress}\r\n        />\r\n    );\r\n}\r\n\r\nconst checkLine = (line, valueToCheck) => {\r\n    return line.length === line.filter((value) => value === valueToCheck).length;\r\n}\r\n\r\nconst checkLines = (lines, valueToCheck) => {\r\n    for(let i = 0; i < lines.length; i++) {\r\n        let line = lines[i];\r\n        if(checkLine(line, valueToCheck)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nconst hasMovesLeft = (gridArray) => {\r\n    return gridArray.filter((value) => value === 0).length !== 0;\r\n}\r\nexport default TicTacToe;\r\nexport {checkLine, checkLines, hasMovesLeft};"]},"metadata":{},"sourceType":"module"}