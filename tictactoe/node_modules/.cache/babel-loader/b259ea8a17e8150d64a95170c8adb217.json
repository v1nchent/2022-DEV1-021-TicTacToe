{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HI10\\\\Documents\\\\VincentV\\\\BNPTTT\\\\New folder\\\\tic-tac-toe\\\\src\\\\components\\\\tictactoe.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport Grid from \"./grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TicTacToe = props => {\n  _s();\n\n  const gridArray = useRef(Array.from(Array(9).fill(0)));\n  const winningLines = [gridArray.current.filter((value, index) => index === 0 || index === 1 || index === 2), gridArray.current.filter((value, index) => index === 3 || index === 4 || index === 5), gridArray.current.filter((value, index) => index === 6 || index === 7 || index === 8), gridArray.current.filter((value, index) => index === 0 || index === 3 || index === 6), gridArray.current.filter((value, index) => index === 1 || index === 4 || index === 7), gridArray.current.filter((value, index) => index === 2 || index === 5 || index === 8), gridArray.current.filter((value, index) => index === 0 || index === 4 || index === 8), gridArray.current.filter((value, index) => index === 2 || index === 4 || index === 6)];\n  const [isFirstPlayerTurn, setFirstPlayerTurn] = useState(true);\n  useEffect(() => {\n    let valueToCheck = !isFirstPlayerTurn ? 1 : 2;\n    let hasWinningCombo = checkLines(winningLines, valueToCheck); //let hasMovesLeft = hasMovesLeft(gridArray.current);\n\n    if (hasWinningCombo || !hasMovesLeft(gridArray.current)) {\n      let message;\n\n      if (hasWinningCombo) {\n        message = \"Game Over, player \" + (!isFirstPlayerTurn ? 1 : 2) + \" won!\\nPress OK to restart\";\n      } else {\n        message = \"Game Over, game ended in a draw\\nPress OK to restart\";\n      }\n\n      window.alert(message);\n      gridArray.current = Array.from(Array(9).fill(0));\n      setFirstPlayerTurn(true);\n    }\n  });\n\n  const onTilePress = index => {\n    gridArray.current[index] = isFirstPlayerTurn ? 1 : 2;\n    setFirstPlayerTurn(!isFirstPlayerTurn);\n  };\n\n  console.log(\"I have been reached\");\n  console.log(props.board);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    gridArray: gridArray.current,\n    onTilePress: onTilePress\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TicTacToe, \"Zj+zdPeWFXR2+60g1broZ3Zu0fs=\");\n\n_c = TicTacToe;\n\nconst checkLine = (line, valueToCheck) => {\n  return line.length === line.filter(value => value === valueToCheck).length;\n};\n\nconst checkLines = (lines, valueToCheck) => {\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n\n    if (checkLine(line, valueToCheck)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst hasMovesLeft = gridArray => {\n  return gridArray.filter(value => value === 0).length !== 0;\n};\n\nexport default TicTacToe;\nexport { checkLine, checkLines, hasMovesLeft };\n\nvar _c;\n\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"sources":["C:/Users/HI10/Documents/VincentV/BNPTTT/New folder/tic-tac-toe/src/components/tictactoe.js"],"names":["useEffect","useRef","useState","Grid","TicTacToe","props","gridArray","Array","from","fill","winningLines","current","filter","value","index","isFirstPlayerTurn","setFirstPlayerTurn","valueToCheck","hasWinningCombo","checkLines","hasMovesLeft","message","window","alert","onTilePress","console","log","board","checkLine","line","length","lines","i"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport Grid from \"./grid\";\r\n\r\nconst TicTacToe = (props) => {\r\n\r\n    const gridArray = useRef(Array.from(Array(9).fill(0)));\r\n    const winningLines = [\r\n        gridArray.current.filter((value, index) => index === 0 || index === 1 || index === 2),\r\n        gridArray.current.filter((value, index) => index === 3 || index === 4 || index === 5),\r\n        gridArray.current.filter((value, index) => index === 6 || index === 7 || index === 8),\r\n        gridArray.current.filter((value, index) => index === 0 || index === 3 || index === 6),\r\n        gridArray.current.filter((value, index) => index === 1 || index === 4 || index === 7),\r\n        gridArray.current.filter((value, index) => index === 2 || index === 5 || index === 8),\r\n        gridArray.current.filter((value, index) => index === 0 || index === 4 || index === 8),\r\n        gridArray.current.filter((value, index) => index === 2 || index === 4 || index === 6)\r\n    ];\r\n\r\n    const [isFirstPlayerTurn, setFirstPlayerTurn] = useState(true);\r\n\r\n    useEffect(() => {\r\n        let valueToCheck = !isFirstPlayerTurn ? 1 : 2;\r\n        let hasWinningCombo = checkLines(winningLines, valueToCheck);\r\n        //let hasMovesLeft = hasMovesLeft(gridArray.current);\r\n        if(hasWinningCombo || !hasMovesLeft(gridArray.current)) {\r\n            let message;\r\n            if(hasWinningCombo) {\r\n                message = \"Game Over, player \" + (!isFirstPlayerTurn ? 1 : 2) + \" won!\\nPress OK to restart\";\r\n            } else {\r\n                message = \"Game Over, game ended in a draw\\nPress OK to restart\";\r\n            }\r\n            window.alert(message);\r\n            gridArray.current = Array.from(Array(9).fill(0));\r\n            setFirstPlayerTurn(true);\r\n        }\r\n    });\r\n\r\n    const onTilePress = (index) => {\r\n        gridArray.current[index] = isFirstPlayerTurn ? 1 : 2;\r\n        setFirstPlayerTurn(!isFirstPlayerTurn);\r\n    }\r\n    console.log(\"I have been reached\")\r\n    console.log(props.board)\r\n    return(\r\n        <Grid\r\n        gridArray={gridArray.current}\r\n        onTilePress={onTilePress}\r\n        />\r\n    );\r\n}\r\n\r\nconst checkLine = (line, valueToCheck) => {\r\n    return line.length === line.filter((value) => value === valueToCheck).length;\r\n}\r\n\r\nconst checkLines = (lines, valueToCheck) => {\r\n    for(let i = 0; i < lines.length; i++) {\r\n        let line = lines[i];\r\n        if(checkLine(line, valueToCheck)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nconst hasMovesLeft = (gridArray) => {\r\n    return gridArray.filter((value) => value === 0).length !== 0;\r\n}\r\nexport default TicTacToe;\r\nexport {checkLine, checkLines, hasMovesLeft};"]},"metadata":{},"sourceType":"module"}