{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HI10\\\\Documents\\\\VincentV\\\\BNPTTT\\\\New folder\\\\tic-tac-toe\\\\src\\\\components\\\\tictactoe.js\";\nimport { useEffect, useRef, useState, Component } from \"react\";\nimport Grid from \"./grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class TicTacToe extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gridArray: props.board,\n      gameId: props.gameId,\n      firstPlayerTurn: true,\n      boardIsFull: false,\n      winner: null\n    };\n    this.onTilePress = this.onTilePress.bind(this);\n    this.checkIfBoardIsFull = this.checkIfBoardIsFull.bind(this);\n  }\n\n  async gamePlay(playertype, coX, coY, gameId) {\n    const that = this;\n    let playerhold = JSON.stringify({\n      \"type\": playertype,\n      \"coordinateX\": coX,\n      \"coordinateY\": coY,\n      \"gameId\": gameId\n    });\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: playerhold\n    };\n    await fetch(\"http://localhost:8080/game/gameplay\", requestOptions).then(response => {\n      response.json().then(progressedGame => {\n        that.setState({\n          gridArray: progressedGame.board,\n          winner: progressedGame.winner\n        });\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  checkIfBoardIsFull() {\n    let counter = 0;\n\n    for (let indexX = 0; indexX < this.state.gridArray.length; indexX++) {\n      for (let indexY = 0; indexY < this.state.gridArray[indexX].length; indexY++) {\n        if (!this.state.gridArray[indexX][indexY] === 0) {\n          counter++;\n        }\n      }\n    }\n\n    if (counter === 9) {\n      this.setState({\n        boardIsFull: true\n      });\n    }\n  }\n\n  onTilePress(index) {\n    this.gamePlay(this.state.firstPlayerTurn ? 0 : 1, index[0], index[1], this.state.gameId);\n    let currentTurn = !this.state.firstPlayerTurn;\n    this.state.firstPlayerTurn = currentTurn;\n  }\n\n  render() {\n    if (this.state.winner === null && !this.state.boardIsFull) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          gridArray: this.state.gridArray,\n          onTilePress: this.onTilePress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this);\n    } else if (this.state.winner === \"X\" || this.state.winner === \"O\") {\n      for (let indexX = 0; indexX < this.state.gridArray.length; indexX++) {\n        for (let indexY = 0; indexY < this.state.gridArray[indexX].length; indexY++) {\n          if (this.state.gridArray[indexX][indexY] === 0) {\n            this.state.gridArray[indexX][indexY] = 3;\n          }\n        }\n      }\n\n      console.log(this.state.gridArray);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"The player using \", this.state.winner, \" has won\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          gridArray: this.state.gridArray,\n          onTilePress: this.onTilePress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"For a new game, press the following button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.props.resetGame,\n          children: \"Start game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"This game was a tie, you both played outstanding\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          gridArray: this.state.gridArray,\n          onTilePress: this.onTilePress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"For a new game, press the following button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.props.resetGame,\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this);\n    }\n  }\n\n}\nexport default TicTacToe;","map":{"version":3,"sources":["C:/Users/HI10/Documents/VincentV/BNPTTT/New folder/tic-tac-toe/src/components/tictactoe.js"],"names":["useEffect","useRef","useState","Component","Grid","TicTacToe","constructor","props","state","gridArray","board","gameId","firstPlayerTurn","boardIsFull","winner","onTilePress","bind","checkIfBoardIsFull","gamePlay","playertype","coX","coY","that","playerhold","JSON","stringify","requestOptions","method","headers","body","fetch","then","response","json","progressedGame","setState","catch","err","console","log","counter","indexX","length","indexY","index","currentTurn","render","resetGame"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState, Component} from \"react\";\r\nimport Grid from \"./grid\";\r\n\r\nexport class TicTacToe extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        gridArray: props.board,\r\n        gameId: props.gameId,\r\n        firstPlayerTurn: true,\r\n        boardIsFull: false, \r\n        winner: null\r\n      }\r\n  \r\n      this.onTilePress = this.onTilePress.bind(this);\r\n      this.checkIfBoardIsFull = this.checkIfBoardIsFull.bind(this);\r\n    }\r\n    async gamePlay(playertype, coX, coY, gameId){\r\n      const that = this;\r\n          let playerhold = JSON.stringify({\r\n              \"type\": playertype,\r\n              \"coordinateX\" : coX,\r\n              \"coordinateY\" : coY,\r\n              \"gameId\" : gameId\r\n          });\r\n      const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: playerhold}\r\n        await fetch(\"http://localhost:8080/game/gameplay\", \r\n        requestOptions\r\n          )\r\n          .then((response) => {\r\n            response.json()\r\n            .then((progressedGame) => {\r\n              that.setState({\r\n                gridArray : progressedGame.board,\r\n                winner: progressedGame.winner\r\n              })\r\n            }) \r\n          })\r\n        .catch(err => {console.log(err);\r\n        });\r\n    }\r\n    \r\n    checkIfBoardIsFull(){\r\n      let counter = 0;\r\n      for (let indexX = 0; indexX < this.state.gridArray.length; indexX++) {\r\n        for (let indexY = 0; indexY < this.state.gridArray[indexX].length; indexY++) {\r\n          if (!this.state.gridArray[indexX][indexY]===0) {\r\n            counter++\r\n          }\r\n        }\r\n      }\r\n      if (counter ===9) {\r\n        this.setState({\r\n          boardIsFull: true\r\n        })\r\n      }\r\n    }\r\n\r\n    onTilePress(index){\r\n        this.gamePlay(this.state.firstPlayerTurn?0:1 , index[0], index[1], this.state.gameId)\r\n        let currentTurn = !this.state.firstPlayerTurn;\r\n        this.state.firstPlayerTurn =  currentTurn;\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n      if(this.state.winner === null && !this.state.boardIsFull){\r\n      return(\r\n        <div>\r\n          <Grid\r\n          gridArray={this.state.gridArray}\r\n          onTilePress={this.onTilePress}\r\n          />\r\n        </div>\r\n        )\r\n      }\r\n      else if(this.state.winner === \"X\" || this.state.winner === \"O\")\r\n      {\r\n        for (let indexX = 0; indexX < this.state.gridArray.length; indexX++) {\r\n          for (let indexY = 0; indexY < this.state.gridArray[indexX].length; indexY++) {\r\n            if (this.state.gridArray[indexX][indexY]===0) {\r\n              this.state.gridArray[indexX][indexY]=3;\r\n            }\r\n          }\r\n          \r\n        }\r\n        console.log(this.state.gridArray)\r\n      return(\r\n        <div>\r\n          <h1>The player using {this.state.winner} has won</h1>\r\n          <Grid\r\n          gridArray={this.state.gridArray}\r\n          onTilePress={this.onTilePress}\r\n          />\r\n          <h1>For a new game, press the following button</h1>\r\n          <button onClick={this.props.resetGame}>Start game</button>\r\n        </div>\r\n      )}\r\n      else {\r\n        return(\r\n          <div>\r\n          <h1>This game was a tie, you both played outstanding</h1>\r\n          <Grid\r\n          gridArray={this.state.gridArray}\r\n          onTilePress={this.onTilePress}\r\n          />\r\n          <h1>For a new game, press the following button</h1>\r\n          <button onClick={this.props.resetGame}>New Game</button>\r\n        </div>\r\n        )\r\n      }\r\n      }\r\n}\r\n\r\nexport default TicTacToe;"]},"metadata":{},"sourceType":"module"}