{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HI10\\\\Documents\\\\VincentV\\\\BNPTTT\\\\New folder\\\\tic-tac-toe\\\\src\\\\components\\\\tictactoe.js\";\nimport { useEffect, useRef, useState, Component } from \"react\";\nimport Grid from \"./grid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class TicTacToe extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gridArray: props.board,\n      gameId: props.gameId,\n      firstPlayerTurn: true,\n      winner: null\n    };\n    this.onTilePress = this.onTilePress.bind(this);\n  }\n\n  async gamePlay(playertype, coX, coY, gameId) {\n    const that = this;\n    let playerhold = JSON.stringify({\n      \"type\": playertype,\n      \"coordinateX\": coX,\n      \"coordinateY\": coY,\n      \"gameId\": gameId\n    });\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: playerhold\n    };\n    await fetch(\"http://localhost:8080/game/gameplay\", requestOptions).then(response => {\n      response.json().then(progressedGame => {\n        that.setState({\n          gridArray: progressedGame.board,\n          winner: progressedGame.winner\n        });\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  onTilePress(index) {\n    console.log(this.state.gameId);\n    this.gamePlay(this.state.FirstPlayerTurn ? 1 : 2, index[0], index[1], this.state.gameId);\n    console.log(this.state.firstPlayerTurn);\n    let currentTurn = !this.state.firstPlayerTurn;\n    this.state.firstPlayerTurn = currentTurn;\n    console.log(this.state.firstPlayerTurn);\n  }\n\n  render() {\n    if (this.state.winner == null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          gridArray: this.state.gridArray,\n          onTilePress: this.onTilePress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.winner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this);\n  }\n\n}\nexport default TicTacToe;","map":{"version":3,"sources":["C:/Users/HI10/Documents/VincentV/BNPTTT/New folder/tic-tac-toe/src/components/tictactoe.js"],"names":["useEffect","useRef","useState","Component","Grid","TicTacToe","constructor","props","state","gridArray","board","gameId","firstPlayerTurn","winner","onTilePress","bind","gamePlay","playertype","coX","coY","that","playerhold","JSON","stringify","requestOptions","method","headers","body","fetch","then","response","json","progressedGame","setState","catch","err","console","log","index","FirstPlayerTurn","currentTurn","render"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAsD,OAAtD;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,OAAO,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AACrCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAEF,KAAK,CAACG,KADN;AAEXC,MAAAA,MAAM,EAAEJ,KAAK,CAACI,MAFH;AAGXC,MAAAA,eAAe,EAAE,IAHN;AAIXC,MAAAA,MAAM,EAAE;AAJG,KAAb;AAOA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AACa,QAARC,QAAQ,CAACC,UAAD,EAAaC,GAAb,EAAkBC,GAAlB,EAAuBR,MAAvB,EAA8B;AAC1C,UAAMS,IAAI,GAAG,IAAb;AACI,QAAIC,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC5B,cAAQN,UADoB;AAE5B,qBAAgBC,GAFY;AAG5B,qBAAgBC,GAHY;AAI5B,gBAAWR;AAJiB,KAAf,CAAjB;AAMJ,UAAMa,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFY;AAGrBC,MAAAA,IAAI,EAAEN;AAHe,KAAvB;AAIE,UAAMO,KAAK,CAAC,qCAAD,EACXJ,cADW,CAAL,CAGHK,IAHG,CAGGC,QAAD,IAAc;AAClBA,MAAAA,QAAQ,CAACC,IAAT,GACCF,IADD,CACOG,cAAD,IAAoB;AACxBZ,QAAAA,IAAI,CAACa,QAAL,CAAc;AACZxB,UAAAA,SAAS,EAAGuB,cAAc,CAACtB,KADf;AAEZG,UAAAA,MAAM,EAAEmB,cAAc,CAACnB;AAFX,SAAd;AAID,OAND;AAOD,KAXG,EAYLqB,KAZK,CAYCC,GAAG,IAAI;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACd,KAbK,CAAN;AAcH;;AAEDrB,EAAAA,WAAW,CAACwB,KAAD,EAAO;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7B,KAAL,CAAWG,MAAvB;AACA,SAAKK,QAAL,CAAc,KAAKR,KAAL,CAAW+B,eAAX,GAA6B,CAA7B,GAAiC,CAA/C,EAAmDD,KAAK,CAAC,CAAD,CAAxD,EAA6DA,KAAK,CAAC,CAAD,CAAlE,EAAuE,KAAK9B,KAAL,CAAWG,MAAlF;AACAyB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7B,KAAL,CAAWI,eAAvB;AACA,QAAI4B,WAAW,GAAG,CAAC,KAAKhC,KAAL,CAAWI,eAA9B;AACA,SAAKJ,KAAL,CAAWI,eAAX,GAA8B4B,WAA9B;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK7B,KAAL,CAAWI,eAAvB;AACH;;AAID6B,EAAAA,MAAM,GAAE;AACN,QAAG,KAAKjC,KAAL,CAAWK,MAAX,IAAqB,IAAxB,EAA6B;AAC7B,0BACE;AAAA,+BACE,QAAC,IAAD;AACA,UAAA,SAAS,EAAE,KAAKL,KAAL,CAAWC,SADtB;AAEA,UAAA,WAAW,EAAE,KAAKK;AAFlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAQC;;AACD,wBACE;AAAA,gBACG,KAAKN,KAAL,CAAWK;AADd;AAAA;AAAA;AAAA;AAAA,YADF;AAKC;;AAnEkC;AAsEzC,eAAeR,SAAf","sourcesContent":["import { useEffect, useRef, useState, Component} from \"react\";\r\nimport Grid from \"./grid\";\r\n\r\nexport class TicTacToe extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        gridArray: props.board,\r\n        gameId: props.gameId,\r\n        firstPlayerTurn: true,\r\n        winner: null\r\n      }\r\n  \r\n      this.onTilePress = this.onTilePress.bind(this);\r\n    }\r\n    async gamePlay(playertype, coX, coY, gameId){\r\n      const that = this;\r\n          let playerhold = JSON.stringify({\r\n              \"type\": playertype,\r\n              \"coordinateX\" : coX,\r\n              \"coordinateY\" : coY,\r\n              \"gameId\" : gameId\r\n          });\r\n      const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: playerhold}\r\n        await fetch(\"http://localhost:8080/game/gameplay\", \r\n        requestOptions\r\n          )\r\n          .then((response) => {\r\n            response.json()\r\n            .then((progressedGame) => {\r\n              that.setState({\r\n                gridArray : progressedGame.board,\r\n                winner: progressedGame.winner\r\n              })\r\n            }) \r\n          })\r\n        .catch(err => {console.log(err);\r\n        });\r\n    }\r\n    \r\n    onTilePress(index){\r\n        console.log(this.state.gameId)\r\n        this.gamePlay(this.state.FirstPlayerTurn ? 1 : 2 , index[0], index[1], this.state.gameId)\r\n        console.log(this.state.firstPlayerTurn);\r\n        let currentTurn = !this.state.firstPlayerTurn;\r\n        this.state.firstPlayerTurn =  currentTurn;\r\n        console.log(this.state.firstPlayerTurn);\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n      if(this.state.winner == null){\r\n      return(\r\n        <div>\r\n          <Grid\r\n          gridArray={this.state.gridArray}\r\n          onTilePress={this.onTilePress}\r\n          />\r\n        </div>\r\n        )\r\n      }\r\n      return(\r\n        <div>\r\n          {this.state.winner}\r\n        </div>\r\n      )\r\n      }\r\n}\r\n\r\nexport default TicTacToe;"]},"metadata":{},"sourceType":"module"}